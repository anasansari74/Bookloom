Technologies

	- C#
	- .NET 6 with Postgres for backend data storage
	- WPF for frontend development
	- MVVM design pattern, utilizing the PRISM framework (found at prismlibrary.com)
	- Adherence to SOLID principles
	- Unit testing on XUnit
	- Database normalization for efficient data storage
	- Learning resources from pluralsight.com/pricing/skills
	- Docker for containerization

-----------------------------------------------------------------------

Wireframes

	- Admin Books: 
		- Filter, edit, and add books with authorization notification.
	Admin Transactions: 
		- View and filter transactions with authorization notification.
	Admin login Modal:
		- Login form that validates admin credentials
	Customer Sales: 
		- Browse and add books to basket, with admin access option.
	Customer Basket: 
		- Manage items in basket.

## Detailed wireframes written and drawn in seperate file and directory for better organization and accessiblity

-----------------------------------------------------------------------

Data Model

	Book: 
		book_id, book_title, book_image, book_price

	Inventory:
		inventory_id, book_id, quantity
	
	Transaction:
		transaction_id, transaction_date, total_amount

	TransactionItem:
		transaction_item_id, book_id, transaction_id, book_title, book_price, quantity_sold

	Admin:
		admin_id, username, password, email, role

-----------------------------------------------------------------------

MVP's

	- Frontend:
		- Customer 
			- Header containing title and logo
			- Sales page
				- Books displayed in rows and columns
				- Option to filter books by name
				- Each book accompanied by a picture, title, and price
				- Add to basket button for each book
			-Modal
				- When a customer selects add to basket button, a modal will appear asking the quantity and confirmation to move to basket
			- Basket page
				- Shows all selected books and a button at the bottom whihc is confirm purchase
		
		Admin
			- Header ( containing title and and log in button )
			- books
				- Display of all books in tabular format
				- Edit button for each book which:
					- Can only be done by the "super admin"
					- Opens book details in the same table
				- "Add Book" option at the bottom of the page
			- transactions
				- Display of all transactions in tabular format
				- Filter options to search by date, id or book_title
		
	- Backend:

		Books
			Get all books: GET request '/api/books'
			Get book by id: GET request '/api/books/{id}'
			Get book by name: GET request '/api/books/{name}'

			Update book: PUT request '/api/books/{id}' | authorization: Admin only with "super admin" checks
			Delete book: DELETE request '/api/books/{id}' | authorization: Admin only with "super admin" checks
			Add book: POST request '/api/books' | authorization: Admin only with "super admin" checks

		Inventory
			Get inventory by book id: GET request '/api/inventory/book/{bookId}
			Update inventory: PUT request '/api/inventory/book/{bookId} | authorization: Admin only

		Transactions
			Get all transactions: GET request '/api/transactions' | authorization: Admin only
			Get transaction by id: GET request '/api/transactions/{id}' | authorization: Admin only
			Get transaction by date: GET request '/api/transactions/{date}' | authorization: Admin only
			Get transaction with a specific book: GET request '/api/transactions/{bookTitle}' | authorization: Admin only

		Admin
			Get all admins: GET request 'api/admins'  | authorization: Super admin only
			Add new admin: POST request 'api/admins'  | authorization: Super admin only
			Update admin: PUT request 'api/admins'  | authorization: Super admin only
			Delete admin: DELETE request 'api/admins'  | authorization: Super admin only

-----------------------------------------------------------------------

Stretch goals

	- Continuous Integration/Continuous Deployment (CICD) pipeline setup.
	- Add genre's to books

-----------------------------------------------------------------------

Standards

	- Naming conventions:
		- camelCasing for parameters
		- PascalCasing for all other identifiers

